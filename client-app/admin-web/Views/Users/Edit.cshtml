@using Newtonsoft.Json
@model UserViewModel
@{
    ViewData["Title"] = "Edit User";
    var tempRoles = TempData.Peek("Roles") as string;
    var roles = Newtonsoft.Json.JsonConvert.DeserializeObject<AdminWeb.Models.Response.UserRolesResponse[]>(tempRoles!);
}

<form class="row g-3" asp-action="edit" asp-controller="users" method="post">
    @Html.HiddenFor(a => a.Id)
    @Html.HiddenFor(a => a.Roles)
    <div class="col-md-6">
        <label for="inputUsername" class="form-label">Username</label>
        <input type="text" class="form-control" id="inputUsername" name="Username" value="@Model.Username" readonly>
    </div>
    <div class="col-md-6">
        <label for="inputPassword" class="form-label">Password</label>
        <input type="password" class="form-control" id="inputPassword" name="Password">
    </div>
    <div class="col-md-6">
        <label for="inputEmail" class="form-label">Email</label>
        <input type="text" class="form-control" id="inputEmail" placeholder="email..." name="Email"
               value="@Model.Email">
    </div>
    <div class="col-md-6">
        <label for="inputPhone" class="form-label">Phone</label>
        <input type="text" class="form-control" id="inputPhone" placeholder="phone..." name="PhoneNumber"
               value="@Model.PhoneNumber">
    </div>
    <div class="col-md-6">
        <label asp-for="@Model.CustomerId" class="form-label">Customer</label>
        @await Component.InvokeAsync("Customer", new { model = "CustomerId", value = Model.CustomerId })
    </div>
    <div class="col-md-6 d-flex flex-column justify-content-center">
        <label asp-for="@Model.IsLocked" class="form-label">
            @Html.CheckBoxFor(a => a.IsLocked, new { @class = "pr-2" }) Locked
        </label>
    </div>
    <div class="col-12">
        <label class="form-label">Roles</label>
        <div class="d-flex flex-wrap">
            @for (int i = 0; i < roles?.Length; i++)
            {
                var role = roles[i];
                <div class="pe-3 w-50 optRole @(string.IsNullOrEmpty(role.CustomerId) ? "all" : role.CustomerId)">
                    <label for="ckbRole_@i" data-bs-toggle="tooltip" data-bs-html="true"
                        title="<div class='text-left'>- @string.Join(("<br/> - "), role.Actions)</div>">
                        <input type="checkbox" name="UsrRoles" id="ckbRole_@i" value="@role.Name"
                        @(Model.Roles!.Contains(role.Name) ? "checked" : "") />
                        @role.DisplayName
                    </label>
                </div>
            }
        </div>
    </div>
    <div class="col-12">
        <button type="submit" class="btn btn-success">
            <i class="bi bi-save"></i> Save
        </button>
        <a class="btn btn-secondary" asp-action="index" asp-controller="users" asp-route-customerId="@ViewBag.cid">
            <i class="bi bi-x-circle"></i> Cancel
        </a>
    </div>
</form>

@if (Html.IsSystemUsr())
{
    @section PageScripts
    {
    <script>
        function toggleRoles() {
            $('.optRole').show();
            var customerId = $('#CustomerId').val();
            if (customerId) {
                $('.optRole:not(.' + customerId + ')').hide();
                $('.optRole.all').show();
            } else {
                $('.optRole:not(.all)').hide();
            }
        }

        $('#CustomerId').change((e) => {
            toggleRoles();
        });
        $(function () {
            toggleRoles();

            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            })
        });
    </script>
    }
}